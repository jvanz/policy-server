name: Release policy server
on:
  workflow_run:
    workflows: ["Build policy server"]
    types:
      - completed
    branches:
      - "v*"

jobs:
  release:
    name: Create release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Download build artifacts
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith("policy-server")
            });
            for (const artifact of matchArtifact) {
              let download = await github.rest.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: artifact.id,
                 archive_format: 'zip',
              });
              let fs = require('fs');
              file_path = `${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`;
              fs.writeFileSync(file_path, Buffer.from(download.data));
            }
      - name: 'Unzip build artifacts'
        run: unzip -n "policy-server-*.zip" -d artifacts

      - name: Get old release tag
        id: get_old_release_tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });

            if (release.status  === 200 ) {
              core.setOutput('release_tag', release.data.tag_name)
              return
            }
            core.setFailed("Cannot find latest release")

      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.workflow_run.head_branch }}
          name: Release policy-server ${{ github.event.workflow_run.head_branch }}
          draft: false
          prerelease: ${{ contains(github.event.workflow_run.head_branch, '-alpha') || contains(github.event.workflow_run.head_branch, '-beta') || contains(github.event.workflow_run.head_branch, '-rc') }}
          files: |
            artifacts/*

      - name: Get new release tag
        id: get_new_release_tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });

            if (release.status  === 200 ) {
              core.setOutput('release_tag', release.data.tag_name)
              return
            }
            core.setFailed("Cannot find latest release")

      - name: Trigger chart update
        uses: peter-evans/repository-dispatch@26b39ed245ab8f31526069329e112ab2fb224588
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
          repository: "${{github.repository_owner}}/helm-charts"
          event-type: update-chart
          client-payload: '{"version": "${{ steps.get_new_release_tag.outputs.release_tag }}", "oldVersion": "${{ steps.get_old_release_tag.outputs.release_tag }}", "repository": "${{ github.repository }}"}'
